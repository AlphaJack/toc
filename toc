#!/usr/bin/env bash

# ┌───────────────────────────────────────────────────────────────┐
# │ CONTENTS OF toc                                               │
# ├───────────────────────────────────────────────────────────────┘
# │
# ├── INFO
# ├── VARIABLES
# ├──┐FUNCTIONS
# │  ├── HELPERS
# │  ├── COMMENT TYPE
# │  └── TOC PARTS
# ├── COMMANDS
# │
# └───────────────────────────────────────────────────────────────

# ################################################################ INFO

# toc 1.0.0 - Generate a table of contents from the comments of a file
# © 2023 Jack Coleman - GPLv3 License
# see README.md at https://github.com/AlphaJack/toc for more information

# ################################################################ VARIABLES

set -euo pipefail

version=1.0.0
lineNumbers=false
opt=
c=

# ################################################################ FUNCTIONS

# ################################ HELPERS

main(){
 load_options "$@"
 check_extension "$@"
 generate_toc
}

print_error(){
 echo "[KO] $1" 1>&2
 exit 1
}

print_help(){
 cat <<HELP
toc - Generate a table of contents from the comments of a file
Usage: toc [options] target
Comment options:
    -b          Comments start with "#"  (e.g. Bash)
    -c          Comments start with "//" (e.g. C)
    -i          Comments start with ";"  (e.g. ini)
    -l          Comments start with "%"  (e.g. LaTeX)
    -s          Comments start with "--" (e.g. SQL)

Other options:
    -h          Print this help message and exit
    -n          Print line numbers next to headers
    -v          Print the program version and exits
 
Example comments:

​    # ################################################################ First level
​    # ################################ Second level
​    # ################ Third level
​    # ######## Fourth level
​    # #### Fifth level
    
Example generations:

    toc script.sh
    toc -n slideshow.tex
HELP
 exit 0
}

print_version(){
 echo "$0 $version"
 exit 0
}

# ################################ COMMENT TYPE

load_options(){
 # read user-provided comment type
 while getopts 'bcilshnv' type; do
  case "$type" in 
   b)
    c="#"
   ;;
   c)
    c="//"
   ;;
   i)
    c=";"
   ;;
   l)
    c="%"
   ;;
   s)
    c="--"
   ;;
   h)
    print_help
   ;;
   n)
    lineNumbers=true
   ;;
   v)
    print_version
   ;;
   ?)
    print_error "Unknown option '$opt'."
   ;;
  esac
 done
 shift $((OPTIND -1))
}

check_extension(){
 # automatically select the comment type from its extension, if not already set
 file="${!#}"
 extension="${file##*.}"
 if [[ -z "$c" ]]; then
  case "$extension" in
   c|cc|cpp|d|go|js|rs|swift|typ) c="//";;
   ini) c=";";;
   bib|cls|mat|sty|tex) c="%";;
   hs|sql) c="--";;
   *) c="#";;
  esac
 fi
}

# ################################ TOC PARTS

generate_toc(){
 # read file and generate toc
 if [[ -r "$file" ]]; then
  toc_header
  toc_body
  toc_footer
 else
  print_error "Cannot read file \"$file\"".
 fi
}

toc_header(){
 # print multiline comment if needed
 case "$extension" in
  css) echo "/*";;
  html|md) echo "<!--";;
 esac
 # truncates $file name to fit in a 64-characters-long box
 filename="$(basename "$file")"
 if [ ${#filename} -gt 40 ]; then
  filename="${filename:0:39}….${filename/*./}"
 fi
 # draw box
 echo "$c ┌───────────────────────────────────────────────────────────────┐"
 printf "%s %*s%s\n" "$c │ CONTENTS OF $filename" "$((52 - ${#filename}))" "│"
 echo "$c ├───────────────────────────────────────────────────────────────┘"
 echo "$c │"
}

toc_body(){
 # generate toc from comments, handling markdown files differently
 case "$extension" in
  md)
   newtoc="$(awk '/^#+ [A-Za-z0-9]/' "$file" | sed \
    -e "s|^######|\t│              └──|g" \
    -e "s|^#####|\t│           └──|g" \
    -e "s|^####|\t│        └──|g" \
    -e "s|^###|\t│     └──|g" \
    -e "s|^##|\t│  └──|g" \
    -e "s|^#|\n\t├──|g" \
    -e "s|\t|$c |g")"
  ;;
  *)
   # print line numbers
   if [[ "$lineNumbers" = true ]]; then
    oldtoc="$(awk -v c="$c" '($1 ~ c) && ($2 ~ /#{4,}/) && ($3 ~ /^[A-Za-z0-9]/) {gsub(/^ /, ""); print $0, FNR}' "$file")"
   else
    oldtoc="$(awk -v c="$c" '($1 ~ c) && ($2 ~ /#{4,}/) && ($3 ~ /^[A-Za-z0-9]/) {gsub(/^ /, ""); print $0}' "$file")"
   fi
   newtoc="$(echo "$oldtoc" | sed \
    -e "s|^$c ################################################################|\n$c ├──|g" \
    -e "s|^$c ################################|$c │  └──|g" \
    -e "s|^$c ################|$c │     └──|g" \
    -e "s|^$c ########|$c │        └──|g" \
    -e "s|^$c ####|$c │           └──|g" \
    -e "s|^$c ##|$c │              └──|g")"
  ;;
 esac
 # replaces the standard nested connector with nicer unicode characters
 echo "$newtoc" | perl -CSD -Mutf8 -e '
  my @lines = reverse <>;
  for ( @lines ) {
   if ( /[└├]/ ) {
    # position of the match
    my $i = $-[0];
    substr($_, $i, 1, "├") if $flags[$i];
    $flags[$i] = 1;
    # position of its children
    my $j = $i+3;
    substr($_, $j, 1, "┐") if $flags[$j];
    $flags[$j] = 0;
    while ( $i-- ) {
     substr($_, $i, 1, "│") if $flags[$i];
    }
   }
  }
  print reverse @lines;
 ' | awk 'NF > 0'
}

toc_footer(){
 # end the toc with an horizontal line
 echo "$c │"
 echo "$c └───────────────────────────────────────────────────────────────"
 # print multiline comment if needed
 case "$extension" in
  css) echo "*/";;
  html|md) echo "-->";;
 esac
}

# ################################################################ COMMANDS

main "$@"
